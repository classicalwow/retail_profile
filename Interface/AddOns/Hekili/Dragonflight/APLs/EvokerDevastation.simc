actions.precombat+=/use_item,name=shadowed_orb_of_torment
actions.precombat+=/firestorm,if=talent.firestorm
actions.precombat+=/living_flame,if=!talent.firestorm
# Evaluates both trinkets cooldowns to see if they can be evenly divided by the cooldown of Dragonrage, prioritizes trinkets that will sync with this cooldown
actions.precombat+=/variable,name=trinket_1_sync,op=setif,value=1,value_else=0.5,condition=trinket.1.has_use_buff&(trinket.1.cooldown.duration%%cooldown.dragonrage.duration=0)
actions.precombat+=/variable,name=trinket_2_sync,op=setif,value=1,value_else=0.5,condition=trinket.2.has_use_buff&(trinket.2.cooldown.duration%%cooldown.dragonrage.duration=0)
# Estimates a trinkets value by comparing the cooldown of the trinket, divided by the duration of the buff it provides. Has a intellect modifier (currently 1.5x) to give a higher priority to intellect trinkets. The intellect modifier should be changed as intellect priority increases or decreases. As well as a modifier for if a trinket will or will not sync with cooldowns.
actions.precombat+=/variable,name=trinket_priority,op=setif,value=2,value_else=1,condition=!trinket.1.has_use_buff&trinket.2.has_use_buff|trinket.2.has_use_buff&((trinket.2.cooldown.duration%trinket.2.proc.any_dps.duration)*(1.5+trinket.2.has_buff.intellect)*(variable.trinket_2_sync))>((trinket.1.cooldown.duration%trinket.1.proc.any_dps.duration)*(1.5+trinket.1.has_buff.intellect)*(variable.trinket_1_sync))

actions+=/quell
actions+=/potion,if=buff.dragonrage.up|time>=300&fight_remains<35
actions+=/use_item,name=shadowed_orb_of_torment
actions+=/use_item,name=crimson_aspirants_badge_of_ferocity,if=cooldown.dragonrage.remains>=55
actions+=/call_action_list,name=trinkets
actions+=/deep_breath,if=spell_targets.deep_breath>1&buff.dragonrage.down
actions+=/dragonrage,if=cooldown.eternity_surge.remains<=(buff.dragonrage.duration+6)&(cooldown.fire_breath.remains<=2*gcd.max|!talent.feed_the_flames)
actions+=/tip_the_scales,if=buff.dragonrage.up&(cooldown.eternity_surge.up&cooldown.fire_breath.remains|!talent.eternity_surge&cooldown.fire_breath.up)&talent.animosity
actions+=/eternity_surge,empower_to=1,if=buff.dragonrage.up&(buff.bloodlust.up|buff.power_infusion.up|buff.tip_the_scales.up)&talent.feed_the_flames
actions+=/tip_the_scales,if=buff.dragonrage.up&cooldown.fire_breath.up&talent.everburning_flame
actions+=/fire_breath,empower_to=4,if=fight_remains<8
actions+=/fire_breath,empower_to=3,if=fight_remains<8
actions+=/fire_breath,empower_to=1,if=talent.everburning_flame&(cooldown.firestorm.remains>=2*gcd.max|!dot.firestorm.ticking)|cooldown.dragonrage.remains>=10&talent.feed_the_flames|!talent.everburning_flame&!talent.feed_the_flames
actions+=/fire_breath,empower_to=2,if=talent.everburning_flame
actions+=/firestorm,if=talent.everburning_flame&(cooldown.fire_breath.up|dot.fire_breath_damage.remains>=cast_time&dot.fire_breath_damage.remains<cooldown.fire_breath.remains)|buff.snapfire.up|spell_targets.firestorm>1
actions+=/shattering_star,if=talent.eternity_surge&cooldown.eternity_surge.remains<=gcd.max
actions+=/shattering_star,if=!talent.arcane_vigor|essence+1<essence.max|buff.dragonrage.up
actions+=/eternity_surge,empower_to=4,if=spell_targets.pyre>3*(1+talent.eternitys_span)
actions+=/eternity_surge,empower_to=3,if=spell_targets.pyre>2*(1+talent.eternitys_span)
actions+=/eternity_surge,empower_to=2,if=spell_targets.pyre>(1+talent.eternitys_span)
actions+=/eternity_surge,empower_to=1,if=(cooldown.eternity_surge.duration-cooldown.dragonrage.remains)<(buff.dragonrage.duration+6-gcd.max)
## Consider adding &(boss|time<15|fight_remains>30) to save Leaping Flames for moving pack to pack in M+.
actions+=/living_flame,if=buff.burnout.up&buff.leaping_flames.up&buff.essence_burst.stack<buff.essence_burst.max_stack
## Consider adding &(boss|time<15|fight_remains>60) to save Charged Blast for the next pull in M+.
actions+=/pyre,if=talent.volatility&spell_targets.pyre>1&(buff.dragonrage.up&buff.charged_blast.stack>15|buff.charged_blast.stack>19)&cooldown.dragonrage.remains>10
actions+=/pyre,if=talent.volatility&spell_targets.pyre>2&cooldown.dragonrage.remains>10
actions+=/pyre,if=!talent.volatility&spell_targets.pyre>2&buff.charged_blast.stack>9&cooldown.dragonrage.remains>10
actions+=/pyre,if=!talent.volatility&spell_targets.pyre>3&cooldown.dragonrage.remains>10
actions+=/disintegrate,if=active_enemies=2,chain=1,interrupt_if=buff.dragonrage.up&ticks>=2,interrupt_immediate=1
actions+=/living_flame,if=buff.burnout.up&active_enemies<4
actions+=/azure_strike,if=talent.protracted_talons&active_enemies>2
actions+=/disintegrate,if=active_enemies=1,chain=1
actions+=/use_item,name=kharnalex_the_first_light,if=!debuff.shattering_star_debuff.up&!buff.dragonrage.up&spell_targets.pyre=1
actions+=/living_flame,if=!moving|buff.hover.up
actions+=/azure_strike,if=moving|buff.hover.down

# The trinket with the highest estimated value, will be used first and paired with Dragonrage.
actions.trinkets+=/use_item,slot=trinket1,if=buff.dragonrage.up&(!trinket.2.has_cooldown|trinket.2.cooldown.remains|variable.trinket_priority=1)|trinket.1.proc.any_dps.duration>=fight_remains
actions.trinkets+=/use_item,slot=trinket2,if=buff.dragonrage.up&(!trinket.1.has_cooldown|trinket.1.cooldown.remains|variable.trinket_priority=2)|trinket.2.proc.any_dps.duration>=fight_remains
# If only one on use trinket provides a buff, use the other on cooldown. Or if neither trinket provides a buff, use both on cooldown.
actions.trinkets+=/use_item,slot=trinket1,if=(!trinket.1.has_use_buff&(trinket.2.cooldown.remains|!trinket.2.has_use_buff)|cooldown.dragonrage.remains>20|!talent.dragonrage)
actions.trinkets+=/use_item,slot=trinket2,if=(!trinket.2.has_use_buff&(trinket.1.cooldown.remains|!trinket.1.has_use_buff)|cooldown.dragonrage.remains>20|!talent.dragonrage)